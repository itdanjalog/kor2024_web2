[ HTTP ]
    - 이동가능한 문자 전송 규약
    - 무상태유지(상태가 없다. 요청과응답을 별도로 저장하지 않는다.)
    즉] HTTP 통신은 요청이 있을경우에만 응답이 가능하다. 앞전 응답의 데이터는 유지 하지 않는다.
        * 요청이 없으면 응답도 없다. * , 연결구조 가 아니다.

[ 웹소켓 ] websocket
    1. 정의 : ws 프로토콜을 기반으로 클라이언트(유저/JS) 와 서버(서버/Spring/Nodes.js ) 사이에 지속적인 *양방향* 연결
    2. 특징 : 지속적인 양방향 연결이 가능하고 *상태유지* 한다.
    3. 용어 :
        1. 소켓 : 통신의 종착점(엔드포인트 = 통신을 주고 받을때 도착 위치 )
        특징 : 클라이언트 소켓 과 서버 소켓 으로 부터 최초 연결 요청
    4. 구조
        클라이언트 소켓                                    서버소켓
        [          ]                                    [      ]
        === [1] 클라이언트 소켓 와 서버소켓 간의 연결 ===
        1. 클라이언트 소켓이 서버 소켓으로 최초 연결(접속) 요청 보낸다.
            ---------------- 서버에 들어가고 싶어요.. -------->
        2. 서버 소켓이 클라이언트 소켓의 요청을 등록(바인딩) 한다.           접속목록 : [ 클라이언트소켓A , 클라이언트소켓B ]
            <--------------- 클라이언트 접속 요청 허가 --------
        ================================================================
        === [2] 클라이언트 소켓 와 서버소켓 간의 메시지 주고받기 ===
            ----------------- 서버야 안녕하세요. ------------>
        3. 서버 소켓에 등록(상태유지)된 클라이언트 소켓이 서버소켓 에게 메시지 전송
            <---------------- 그래 클라이언트 안녕 ----------
        4. 서버 소켓에 등록(상태유지)된 클라이언트 소켓에게 서버소켓이 메시지 전송

        * 누가 먼저 할것 없이 양방향 연결 이므로 먼제 메시지를 보낼수 있다.

    5. 활용처 : (HTTP가 못하는 것) 실시간 처리( 채팅 , 알림 , 배민(라이더위치), 보안, 웹게임 등등 )
        * HTTP 와 다른점 : 웹소켓은 (서버-클라이언트) 서로 연결된 구조 이므로 요청이 없어도 서로 양방향 통신이 가능하다.

    6. 구현
    [ JS 클라이언트 소켓 구현 ]




    [ JAVA(Spring) 서버 소켓 구현 ]





















